// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

model WorkflowJob {
  id          Int       @id
  name        String
  runId       Int
  runUrl      String
  status      String
  conclusion  String?
  startedAt   DateTime
  completedAt DateTime?
  headBranch  String
  headSha     String

  repositoryId Int
  repository   Repository @relation(fields: [repositoryId], references: [id])

  senderId Int
  sender   Sender @relation(fields: [senderId], references: [id])

  runnerId Int?
  runner   Runner? @relation(fields: [runnerId], references: [id])

  labels Label[] @relation("JobLabels")
}

model Sender {
  id    Int    @id
  login String
  type  String

  workflowJobs WorkflowJob[]
}

model Repository {
  id       Int          @id @default(autoincrement())
  name     String
  fullName String
  ownerId  Int
  owner    Organization @relation(fields: [ownerId], references: [id])

  workflowJobs WorkflowJob[]
}

model Organization {
  id   Int    @id
  name String

  repositories Repository[]
}

model Runner {
  id            Int         @id @default(autoincrement())
  name          String
  runnerGroupId Int
  runnerGroup   RunnerGroup @relation(fields: [runnerGroupId], references: [id])

  workflowJobs WorkflowJob[]
}

model RunnerGroup {
  id   Int    @id @default(autoincrement())
  name String

  runners Runner[]
}

model Label {
  id   Int    @id @default(autoincrement())
  name String @unique

  jobs WorkflowJob[] @relation("JobLabels")
}
